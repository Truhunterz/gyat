.





































































package javaapplication12;


import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class JavaApplication12 extends JFrame implements ActionListener {

    JLabel lblname, lblid, lblemail, lblprogramlevel, lblprogramname, lblprogramsession, lbltitle, lbloutput;
    JButton btnSubmit, btnView, btnReset;
    JTextField txtname, txtid, txtemail;
    JComboBox<String> cbproglevel, cbprogname, cbprogsession;
    JTextArea txtdisplay;
    JScrollPane spdisplay;

    String[] diploma = {"Diploma in Information Technology", "Diploma in Mechanical", "Diploma in Accounting"};
    String[] degree = {"Degree in Business Administration", "Degree in Mechanical Engineering"};
    
    String url = "jdbc:mysql://localhost:3308/infostudent"; // Update with your database URL
    String username = "root"; // Update with your database username
    String password = ""; // Update with your database password

    JavaApplication12() {
        setTitle("Student Enrollment System Sunway University");

        // Initialize components
        lbltitle = new JLabel("ENROLLMENT DATA");
        lblname = new JLabel("Name");
        txtname = new JTextField(20);
        lblid = new JLabel("Student ID");
        txtid = new JTextField(20);
        lblemail = new JLabel("Email");
        txtemail = new JTextField(20);
        lblprogramlevel = new JLabel("Program Level");
        lblprogramname = new JLabel("Program Name");
        lblprogramsession = new JLabel("Program Session");
        lbloutput = new JLabel("Output");
        txtdisplay = new JTextArea();
        spdisplay = new JScrollPane(txtdisplay, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        cbproglevel = new JComboBox<>(new String[]{"Please select", "Diploma", "Degree"});
        cbprogname = new JComboBox<>(new String[]{"Please select"});
        cbprogsession = new JComboBox<>(new String[]{"Please select", "2022", "2023", "2024"});

        btnSubmit = new JButton("Submit");
        btnView = new JButton("View");
        btnReset = new JButton("Reset");

        // Set component bounds
        lbltitle.setBounds(150, 10, 400, 30);
        lblname.setBounds(60, 50, 100, 30);
        txtname.setBounds(180, 50, 300, 30);
        lblid.setBounds(60, 100, 100, 30);
        txtid.setBounds(180, 100, 300, 30);
        lblemail.setBounds(60, 150, 100, 30);
        txtemail.setBounds(180, 150, 300, 30);
        lblprogramlevel.setBounds(60, 200, 100, 30);
        cbproglevel.setBounds(180, 200, 300, 30);
        lblprogramname.setBounds(60, 250, 100, 30);
        cbprogname.setBounds(180, 250, 300, 30);
        lblprogramsession.setBounds(60, 300, 100, 30);
        cbprogsession.setBounds(180, 300, 300, 30);
        btnSubmit.setBounds(70, 350, 100, 30);
        btnView.setBounds(190, 350, 100, 30);
        btnReset.setBounds(310, 350, 100, 30);
        lbloutput.setBounds(60, 400, 100, 30);
        spdisplay.setBounds(60, 440, 600, 300);

        // Add components to frame
        add(lbltitle);
        add(lblname);
        add(txtname);
        add(lblid);
        add(txtid);
        add(lblemail);
        add(txtemail);
        add(lblprogramlevel);
        add(cbproglevel);
        add(lblprogramname);
        add(cbprogname);
        add(lblprogramsession);
        add(cbprogsession);
        add(btnSubmit);
        add(btnView);
        add(btnReset);
        add(lbloutput);
        add(spdisplay);

        // Register event handlers
        cbproglevel.addActionListener(this);
        btnSubmit.addActionListener(this);
        btnView.addActionListener(this);
        btnReset.addActionListener(this);

        // Frame settings
        setLayout(null);
        setSize(800, 800);
        setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public static void main(String[] args) {
        new JavaApplication12();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == cbproglevel) {
            handleProgramLevelSelection();
        } else if (e.getSource() == btnSubmit) {
            handleSubmit();
        } else if (e.getSource() == btnView) {
            handleView();
        } else if (e.getSource() == btnReset) {
            handleReset();
        }
    }

    private void handleProgramLevelSelection() {
        if (cbproglevel.getSelectedItem().equals("Diploma")) {
            cbprogname.removeAllItems();
            for (String item : diploma) {
                cbprogname.addItem(item);
            }
        } else if (cbproglevel.getSelectedItem().equals("Degree")) {
            cbprogname.removeAllItems();
            for (String item : degree) {
                cbprogname.addItem(item);
            }
        } else {
            cbprogname.removeAllItems();
            cbprogname.addItem("Please select");
        }
    }

    private void handleSubmit() {
        String name = txtname.getText();
        String id = txtid.getText();
        String email = txtemail.getText();
        String programLevel = (String) cbproglevel.getSelectedItem();
        String programName = (String) cbprogname.getSelectedItem();
        String programSession = (String) cbprogsession.getSelectedItem();

        if (name.isEmpty() || id.isEmpty() || email.isEmpty() || programLevel.equals("Please select") || programName.equals("Please select") || programSession.equals("Please select")) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Incomplete Form", JOptionPane.ERROR_MESSAGE);
        } else if (!name.matches("[a-zA-Z ]+")) { // Allow spaces in name
            JOptionPane.showMessageDialog(this, "Name must contain alphabetic characters only.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } else if (!email.contains("@")) {
            JOptionPane.showMessageDialog(this, "Email must contain '@'.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } else {
            saveToDatabase(name, id, email, programLevel, programName, programSession);
            JOptionPane.showMessageDialog(this, "Form Submitted Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            displayFormData(name, id, email, programLevel, programName, programSession);
        }
    }

    private void displayFormData(String name, String id, String email, String programLevel, String programName, String programSession) {
        txtdisplay.append("Name: " + name + "\n");
        txtdisplay.append("ID: " + id + "\n");
        txtdisplay.append("Email: " + email + "\n");
        txtdisplay.append("Program Level: " + programLevel + "\n");
        txtdisplay.append("Program Name: " + programName + "\n");
        txtdisplay.append("Program Session: " + programSession + "\n\n");
    }

    private void handleView() {
        displayData();
    }

    private void handleReset() {
        txtname.setText("");
        txtid.setText("");
        txtemail.setText("");
        cbproglevel.setSelectedIndex(0);
        cbprogname.removeAllItems();
        cbprogname.addItem("Please select");
        cbprogsession.setSelectedIndex(0);
        txtdisplay.setText(""); // Clear the display area
    }

    private void saveToDatabase(String name, String id, String email, String programLevel, String programName, String programSession) {
        
        String query = "INSERT INTO data (name, student_id, email, program_level, program_name, session) VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, name);
            pstmt.setString(2, id);
            pstmt.setString(3, email);
            pstmt.setString(4, programLevel);
            pstmt.setString(5, programName);
            pstmt.setString(6, programSession);

            pstmt.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayData() {
        
        String query = "SELECT * FROM data";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            txtdisplay.setText(""); // Clear existing text

            while (rs.next()) {
                String name = rs.getString("name");
                String id = rs.getString("student_id");
                String email = rs.getString("email");
                String programLevel = rs.getString("program_level");
                String programName = rs.getString("program_name");
                String programSession = rs.getString("session");

                txtdisplay.append("Name: " + name + "\n");
                txtdisplay.append("Student ID: " + id + "\n");
                txtdisplay.append("Email: " + email + "\n");
                txtdisplay.append("Program Level: " + programLevel + "\n");
                txtdisplay.append("Program Name: " + programName + "\n");
                txtdisplay.append("Academic Session: " + programSession + "\n");
                txtdisplay.append("---------------------------------------------------\n");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}




































































































.
